/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _lisp = __webpack_require__(1);\n\nvar _lisp2 = _interopRequireDefault(_lisp);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Interpreter = (0, _lisp2.default)('(+ (/ 8 2) (* 3 3))');\nconsole.log('Lisp>: ', Interpreter.run());//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAuanM/ZDhlZSJdLCJuYW1lcyI6WyJJbnRlcnByZXRlciIsImNvbnNvbGUiLCJsb2ciLCJydW4iXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7OztBQUVBLElBQUlBLGNBQWMsb0JBQUsscUJBQUwsQ0FBbEI7QUFDQUMsUUFBUUMsR0FBUixDQUFZLFNBQVosRUFBdUJGLFlBQVlHLEdBQVosRUFBdkIiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBMaXNwIGZyb20gJy4vc3JjL2xpc3AuanMnO1xuXG5sZXQgSW50ZXJwcmV0ZXIgPSBMaXNwKCcoKyAoLyA4IDIpICgqIDMgMykpJyk7XG5jb25zb2xlLmxvZygnTGlzcD46ICcsIEludGVycHJldGVyLnJ1bigpKTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL2FwcC5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nexports.default = function (code) {\n    var api = {};\n\n    var state = (0, _state2.default)(code);\n\n    var ast = Programm(callExpression()(state));\n    var newAst = transformer(ast);\n\n    api.code = code;\n    api.state = state;\n    api.ast = ast;\n    api.newAst = newAst;\n\n    api.run = function () {\n        return Interpreter(newAst);\n    };\n\n    return api;\n};\n\nvar _parser = __webpack_require__(2);\n\nvar _context = __webpack_require__(3);\n\nvar _context2 = _interopRequireDefault(_context);\n\nvar _state = __webpack_require__(5);\n\nvar _state2 = _interopRequireDefault(_state);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * atom parser\n */\nfunction leftParen() {\n    return (0, _parser.ch)('(');\n}\n\nfunction rightParen() {\n    return (0, _parser.ch)(')');\n}\n\nfunction int() {\n    return (0, _parser.action)((0, _parser.range)('0', '9'), function (ast) {\n        return {\n            type: 'NumberLiteral',\n            value: ast\n        };\n    });\n}\n\nfunction identifer() {\n    var result = (0, _parser.repeat1)((0, _parser.choice)((0, _parser.range)('a', 'z'), (0, _parser.range)('A', 'Z')));\n    return (0, _parser.action)(result, function (ast) {\n        return ast.join('');\n    });\n}\n\n/**\n * simple expression (add 2 4)\n */\nfunction atomCallExpression() {\n    return function (state) {\n        var result = (0, _parser.wsequence)(leftParen(), (0, _parser.choice)(identifer(), operator()), int(), int(), rightParen())(state);\n        return {\n            remaining: result.remaining,\n            matched: result.matched,\n            ast: {\n                type: 'CallExpression',\n                name: result.ast[1],\n                params: [result.ast[2], result.ast[3]]\n            }\n        };\n    };\n}\n\n/**\n * (add 3 (sub 4 1))\n */\nfunction callExpression() {\n    return function (state) {\n        var result = (0, _parser.wsequence)(leftParen(), (0, _parser.choice)(identifer(), operator()), (0, _parser.choice)(int(), atomCallExpression()), (0, _parser.choice)(int(), atomCallExpression()), rightParen())(state);\n\n        if (!result) {\n            return result;\n        }\n        return {\n            type: 'CallExpression',\n            name: result.ast[1],\n            params: [result.ast[2], result.ast[3]]\n        };\n    };\n}\n\n/**\n * 空语句\n */\nfunction nilExpression() {\n    var result = (0, _parser.wsequence)(leftParen(), rightParen());\n    if (!result) {\n        return result;\n    }\n\n    return {\n        type: 'nilExpression'\n    };\n}\n//test: ((((()))))\n\n/**\n * 多层级语句\n */\nfunction mutipCallExpression() {\n    var result = (0, _parser.wsequence)(leftParen(), CallExpression(), rightParen());\n    if (!result) {\n        return result;\n    }\n\n    return {\n        type: 'nilExpression'\n    };\n}\n\nconsole.log(nilExpression()((0, _state2.default)('()')));\n\n/**\n * 四则运算, 等同于函数调用\n */\nfunction operator() {\n    return (0, _parser.choice)('+', '-', '*', '/');\n}\n\n/**\n * 变量声明、赋值\n * (let (x 3))\n */\nfunction VariableDeclaration() {}\n\n/**\n * Program\n */\nfunction Programm(ast) {\n    return {\n        type: 'Programm',\n        body: [ast]\n    };\n}\n\nfunction traverser(ast, visitor) {\n    function traverseArray(arr, parent) {\n        arr.forEach(function (child) {\n            traverseNode(child, parent);\n        });\n    }\n\n    function traverseNode(node, parent) {\n        var method = visitor[node.type];\n        if (method) {\n            method(node, parent);\n        }\n\n        switch (node.type) {\n            case 'Programm':\n                traverseArray(node.body, node);\n                break;\n            case 'CallExpression':\n                traverseArray(node.params, node);\n                break;\n            case 'NumberLiteral':\n                break;\n            default:\n                {\n                    throw new TypeError(node.type);\n                }\n        }\n    }\n\n    traverseNode(ast, null);\n}\n\nfunction transformer(ast) {\n    var newAst = {\n        type: 'Programm',\n        body: []\n    };\n\n    ast._context = newAst.body;\n\n    traverser(ast, {\n        NumberLiteral: function NumberLiteral(node, parent) {\n            parent._context.push({\n                type: 'NumberLiteral',\n                value: node.value\n            });\n        },\n        CallExpression: function CallExpression(node, parent) {\n            var expression = {\n                type: 'CallExpression',\n                callee: {\n                    type: 'Identifier',\n                    name: node.name\n                },\n                arguments: []\n            };\n            node._context = expression.arguments;\n            if (parent.type !== 'CallExpression') {\n                expression = {\n                    type: 'ExpressionStatement',\n                    expression: expression\n                };\n            }\n\n            parent._context.push(expression);\n        }\n    });\n\n    return newAst;\n}\n\nfunction codeGenerator(node) {\n    switch (node.type) {\n        case 'Programm':\n            return node.body.map(codeGenerator).join('\\n');\n        case 'ExpressionStatement':\n            return codeGenerator(node.expression) + ';';\n        case 'CallExpression':\n            return codeGenerator(node.callee) + '(' + node.arguments.map(codeGenerator).join(', ') + ')';\n        case 'Identifier':\n            return node.name;\n        // For `NumberLiterals` we'll just return the `node`'s value.\n        case 'NumberLiteral':\n            return node.value;\n\n        // And if we haven't recognized the node, we'll throw an error.\n        default:\n            throw new TypeError(node.type);\n    }\n}\n\n/**\n * runtime helper\n */\nvar runtime = {\n    operator: {\n        '+': function _(p1, p2) {\n            return Number(p1) + Number(p2);\n        },\n        '-': function _(p1, p2) {\n            return Number(p1) - Number(p2);\n        },\n        '*': function _(p1, p2) {\n            return Number(p1) * Number(p2);\n        },\n        '/': function _(p1, p2) {\n            return Number(p1) / Number(p2);\n        }\n    }\n};\n\n/**\n * @private helper function\n */\nfunction oneOf(val) {\n    var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    var isMatch = false;\n    arr.forEach(function (key) {\n        if (val == key) {\n            isMatch = true;\n        }\n    });\n\n    return isMatch;\n}\n\n/**\n * 全局上下文\n */\nvar globalContext = new _context2.default();\nvar currentContext = globalContext;\n\nvar operators = ['+', '-', '*', '/'];\n\nfunction Interpreter(node) {\n    switch (node.type) {\n        case 'Programm':\n            return Interpreter(node.body[0]);\n        case 'ExpressionStatement':\n            {\n                return Interpreter(node.expression);\n            }\n        case 'CallExpression':\n            {\n                var callee = Interpreter(node.callee);\n                if (oneOf(callee, operators)) {\n                    return runtime.operator[callee](Interpreter(node.arguments[0]), Interpreter(node.arguments[1]));\n                } else {\n                    return 0;\n                }\n            }\n        case 'Identifier':\n            return node.name;\n        // For `NumberLiterals` we'll just return the `node`'s value.\n        case 'NumberLiteral':\n            return node.value;\n\n        // And if we haven't recognized the node, we'll throw an error.\n        default:\n            {\n                throw new TypeError(node.type);\n            }\n    }\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 2 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ch = ch;\nexports.token = token;\nexports.ignoreWhitespace = ignoreWhitespace;\nexports.range = range;\nexports.sequence = sequence;\nexports.wsequence = wsequence;\nexports.choice = choice;\nexports.not = not;\nexports.repeat1 = repeat1;\nexports.action = action;\n/**\n * @privite\n */\n\nfunction toParser(p) {\n    return typeof p == 'string' ? token(p) : p;\n}\n\nfunction make_result(remaining, matched, ast) {\n    return {\n        remaining: remaining,\n        matched: matched,\n        ast: ast\n    };\n}\n\n/**\n * primitive parsers\n */\nfunction ch(c) {\n    return function (state) {\n        var r = state.length >= 1 && state.at(0) == c;\n        if (r) {\n            return {\n                remaining: state.advance(1),\n                matched: c,\n                ast: c\n            };\n        } else {\n            console.warn('expect ' + c + ', but get ' + state.at(0) + ' at ' + state.index + '.');\n            return false;\n        }\n    };\n}\n\nfunction token(str) {\n    return function (state) {\n        var r = state.length >= str.length && state.substring(0, str.length) == str;\n\n        if (r) {\n            return {\n                remaining: state.advance(str.length),\n                matched: str,\n                ast: str\n            };\n        } else {\n            return false;\n        }\n    };\n}\n\nfunction ignoreWhitespace(p) {\n    p = toParser(p);\n\n    return function (state) {\n        return p(state.trimLeft());\n    };\n}\n\nfunction range(lower, upper) {\n    return function (state) {\n        if (state.length < 1) {\n            return false;\n        } else {\n            var ch = state.at(0);\n            if (ch >= lower && ch <= upper) {\n                return {\n                    remaining: state.advance(1),\n                    matched: ch,\n                    ast: ch\n                };\n            } else {\n                return false;\n            }\n        }\n    };\n}\n\nfunction sequence() {\n    var parsers = [];\n    for (var i = 0; i < arguments.length; i++) {\n        parsers.push(toParser(arguments[i]));\n    }\n\n    return function (state) {\n        var ast = [];\n        var matched = '';\n        var result = {};\n        var j = 0;\n        for (j = 0; j < parsers.length; j++) {\n            var parser = parsers[j];\n            result = parser(state);\n            if (result) {\n                state = result.remaining;\n                if (result.ast != undefined) {\n                    ast.push(result.ast);\n                    matched = matched + result.matched;\n                }\n            } else {\n                break;\n            }\n        }\n        if (j == parsers.length) {\n            return make_result(result.remaining, matched, ast);\n        } else {\n            return false;\n        }\n    };\n}\n\n/**\n * Like sequence, but ignores whitespace between individual parsers.\n*/\nfunction wsequence() {\n    var parsers = [];\n    for (var i = 0; i < arguments.length; ++i) {\n        parsers.push(ignoreWhitespace(toParser(arguments[i])));\n    }\n    return sequence.apply(null, parsers);\n}\n\nfunction choice() {\n    var parsers = [];\n    for (var i = 0; i < arguments.length; ++i) {\n        parsers.push(toParser(arguments[i]));\n    }return function (state) {\n        var j;\n        var result;\n        for (j = 0; j < parsers.length; j++) {\n            var parser = parsers[j];\n            result = parser(state);\n\n            if (result) {\n                break;\n            }\n        }\n\n        if (j == parsers.length) {\n            return false;\n        }\n\n        return result;\n    };\n}\n\nfunction not(p) {\n    p = toParser(p);\n\n    return function (state) {\n        var result = false;\n        if (state.length >= 1) {\n            if (!p(state)) {\n                result = make_result(state.advance(1), state.at(0), state.at(0));\n            }\n        }\n\n        return result;\n    };\n}\n\nfunction repeat1(p) {\n    p = toParser(p);\n\n    return function (state) {\n        var ast = [];\n        var matched = '';\n        var result = p(state);\n\n        if (result) {\n            while (result) {\n                ast.push(result.ast);\n                matched = matched + result.matched;\n\n                state = result.remaining;\n                result = p(state);\n            }\n            result = make_result(state, matched, ast);\n        } else {\n            return false;\n        }\n\n        return result;\n    };\n}\n\nfunction action(p, f) {\n    p = toParser(p);\n\n    return function (state) {\n        var result = p(state);\n\n        if (result) {\n            result.ast = f(result.ast);\n        } else {\n            return false;\n        }\n\n        return result;\n    };\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _utils = __webpack_require__(4);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Context class\n */\nvar Context = function () {\n    function Context() {\n        var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _utils.hash)();\n\n        _classCallCheck(this, Context);\n\n        this.$scope = (0, _utils.hash)();\n        this.$parent = null;\n        this.$children = [];\n        this.$name = '__context__';\n\n        this.assign(obj);\n    }\n\n    _createClass(Context, [{\n        key: 'isContext',\n        value: function isContext() {\n            var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _utils.hash)();\n\n            if (obj.name === this.$name) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }, {\n        key: 'parent',\n        value: function parent(obj) {\n            if (obj) {\n                if (this.isContext(obj)) {\n                    this.$parent = obj;\n                } else {\n                    throw TypeError(obj);\n                }\n            } else {\n                return this.$parent;\n            }\n        }\n    }, {\n        key: 'children',\n        value: function children(obj) {\n            if (obj) {\n                if (this.isContext(obj)) {\n                    this.$children.push(obj);\n                } else {\n                    throw TypeError(obj);\n                }\n            } else {\n                return this.$children;\n            }\n        }\n    }, {\n        key: 'get',\n        value: function get(key) {\n            return this.$scope[key];\n        }\n    }, {\n        key: 'add',\n        value: function add(key, value) {\n            this.$scope[key] = value;\n        }\n    }, {\n        key: 'remove',\n        value: function remove(key) {\n            delete this.$scope[key];\n        }\n    }, {\n        key: 'assign',\n        value: function assign() {\n            var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            this.$scope = _extends({}, obj, this.$scope);\n        }\n    }]);\n\n    return Context;\n}();\n\nexports.default = Context;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29udGV4dC5qcz8xZGI3Il0sIm5hbWVzIjpbIkNvbnRleHQiLCJvYmoiLCIkc2NvcGUiLCIkcGFyZW50IiwiJGNoaWxkcmVuIiwiJG5hbWUiLCJhc3NpZ24iLCJuYW1lIiwiaXNDb250ZXh0IiwiVHlwZUVycm9yIiwicHVzaCIsImtleSIsInZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7QUFFQTs7O0lBR3FCQSxPO0FBQ2pCLHVCQUF1QjtBQUFBLFlBQVhDLEdBQVcsdUVBQVAsa0JBQU87O0FBQUE7O0FBQ25CLGFBQUtDLE1BQUwsR0FBYyxrQkFBZDtBQUNBLGFBQUtDLE9BQUwsR0FBZSxJQUFmO0FBQ0EsYUFBS0MsU0FBTCxHQUFpQixFQUFqQjtBQUNBLGFBQUtDLEtBQUwsR0FBYSxhQUFiOztBQUVBLGFBQUtDLE1BQUwsQ0FBWUwsR0FBWjtBQUNIOzs7O29DQUVzQjtBQUFBLGdCQUFaQSxHQUFZLHVFQUFSLGtCQUFROztBQUNuQixnQkFBSUEsSUFBSU0sSUFBSixLQUFhLEtBQUtGLEtBQXRCLEVBQTZCO0FBQ3pCLHVCQUFPLElBQVA7QUFDSCxhQUZELE1BRU87QUFDSCx1QkFBTyxLQUFQO0FBQ0g7QUFDSjs7OytCQUVPSixHLEVBQUs7QUFDVCxnQkFBSUEsR0FBSixFQUFTO0FBQ0wsb0JBQUksS0FBS08sU0FBTCxDQUFlUCxHQUFmLENBQUosRUFBeUI7QUFDckIseUJBQUtFLE9BQUwsR0FBZUYsR0FBZjtBQUNILGlCQUZELE1BRU87QUFDSCwwQkFBTVEsVUFBVVIsR0FBVixDQUFOO0FBQ0g7QUFDSixhQU5ELE1BTU87QUFDSCx1QkFBTyxLQUFLRSxPQUFaO0FBQ0g7QUFDSjs7O2lDQUVTRixHLEVBQUs7QUFDWCxnQkFBSUEsR0FBSixFQUFTO0FBQ0wsb0JBQUksS0FBS08sU0FBTCxDQUFlUCxHQUFmLENBQUosRUFBeUI7QUFDckIseUJBQUtHLFNBQUwsQ0FBZU0sSUFBZixDQUFvQlQsR0FBcEI7QUFDSCxpQkFGRCxNQUVPO0FBQ0gsMEJBQU1RLFVBQVVSLEdBQVYsQ0FBTjtBQUNIO0FBQ0osYUFORCxNQU1PO0FBQ0gsdUJBQU8sS0FBS0csU0FBWjtBQUNIO0FBQ0o7Ozs0QkFFSU8sRyxFQUFLO0FBQ04sbUJBQU8sS0FBS1QsTUFBTCxDQUFZUyxHQUFaLENBQVA7QUFDSDs7OzRCQUVJQSxHLEVBQUtDLEssRUFBTztBQUNiLGlCQUFLVixNQUFMLENBQVlTLEdBQVosSUFBbUJDLEtBQW5CO0FBQ0g7OzsrQkFFT0QsRyxFQUFLO0FBQ1QsbUJBQU8sS0FBS1QsTUFBTCxDQUFZUyxHQUFaLENBQVA7QUFDSDs7O2lDQUVlO0FBQUEsZ0JBQVJWLEdBQVEsdUVBQUosRUFBSTs7QUFDWixpQkFBS0MsTUFBTCxnQkFDT0QsR0FEUCxFQUVPLEtBQUtDLE1BRlo7QUFJSDs7Ozs7O2tCQTNEZ0JGLE8iLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGhhc2ggfSBmcm9tICcuL3V0aWxzLmpzJztcblxuLyoqXG4gKiBDb250ZXh0IGNsYXNzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKG9iaj1oYXNoKCkpe1xuICAgICAgICB0aGlzLiRzY29wZSA9IGhhc2goKTtcbiAgICAgICAgdGhpcy4kcGFyZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy4kY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgdGhpcy4kbmFtZSA9ICdfX2NvbnRleHRfXyc7XG5cbiAgICAgICAgdGhpcy5hc3NpZ24ob2JqKTtcbiAgICB9XG5cbiAgICBpc0NvbnRleHQgKG9iaj1oYXNoKCkpIHtcbiAgICAgICAgaWYgKG9iai5uYW1lID09PSB0aGlzLiRuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHBhcmVudCAob2JqKSB7XG4gICAgICAgIGlmIChvYmopIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzQ29udGV4dChvYmopKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kcGFyZW50ID0gb2JqO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3Iob2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRwYXJlbnQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGlsZHJlbiAob2JqKSB7XG4gICAgICAgIGlmIChvYmopIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzQ29udGV4dChvYmopKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kY2hpbGRyZW4ucHVzaChvYmopO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3Iob2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRjaGlsZHJlbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCAoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRzY29wZVtrZXldO1xuICAgIH1cblxuICAgIGFkZCAoa2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLiRzY29wZVtrZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmVtb3ZlIChrZXkpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuJHNjb3BlW2tleV07XG4gICAgfVxuXG4gICAgYXNzaWduIChvYmo9e30pIHtcbiAgICAgICAgdGhpcy4kc2NvcGUgPSB7XG4gICAgICAgICAgICAuLi5vYmosXG4gICAgICAgICAgICAuLi50aGlzLiRzY29wZVxuICAgICAgICB9XG4gICAgfVxufVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2NvbnRleHQuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 4 */
/***/ function(module, exports) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hash = hash;\n/**\n * hash\n */\nfunction hash() {\n  return Object.create(null);\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMuanM/MmZmOCJdLCJuYW1lcyI6WyJoYXNoIiwiT2JqZWN0IiwiY3JlYXRlIl0sIm1hcHBpbmdzIjoiOzs7OztRQUdnQkEsSSxHQUFBQSxJO0FBSGhCOzs7QUFHTyxTQUFTQSxJQUFULEdBQWlCO0FBQ3BCLFNBQU9DLE9BQU9DLE1BQVAsQ0FBYyxJQUFkLENBQVA7QUFDSCIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBoYXNoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNoICgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy91dGlscy5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 5 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = parseState;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar State = function () {\n    function State(input) {\n        _classCallCheck(this, State);\n\n        this.input = input;\n        this.index = 0;\n        this.matched = '';\n        this.rested = this.input;\n        this.length = this.rested.length;\n        this.pos = {\n            col: 0,\n            row: 0\n        };\n    }\n\n    _createClass(State, [{\n        key: 'advance',\n        value: function advance(num) {\n            this.index += num;\n            this.matched += this.rested.substring(0, num);\n            this.rested = this.rested.substring(num);\n            this.length = this.rested.length;\n\n            this.pos.col += num;\n\n            return this;\n        }\n    }, {\n        key: 'trimLeft',\n        value: function trimLeft() {\n            var s = this.rested;\n            var m = s.match(/^\\s+/);\n\n            if (m) {\n                this.advance(m[0].length);\n                this.pos.col += m[0].length;\n            }\n\n            return this;\n        }\n    }, {\n        key: 'posMsg',\n        value: function posMsg() {\n            return 'col: ' + this.pos.col + ', row: ' + this.pos.row;\n        }\n    }, {\n        key: 'substring',\n        value: function substring(start, length) {\n            return this.rested.substring(start, length);\n        }\n    }, {\n        key: 'at',\n        value: function at(index) {\n            return this.rested.charAt(index);\n        }\n    }]);\n\n    return State;\n}();\n\nfunction parseState(str) {\n    return new State(str);\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGUuanM/NTc5YyJdLCJuYW1lcyI6WyJwYXJzZVN0YXRlIiwiU3RhdGUiLCJpbnB1dCIsImluZGV4IiwibWF0Y2hlZCIsInJlc3RlZCIsImxlbmd0aCIsInBvcyIsImNvbCIsInJvdyIsIm51bSIsInN1YnN0cmluZyIsInMiLCJtIiwibWF0Y2giLCJhZHZhbmNlIiwic3RhcnQiLCJjaGFyQXQiLCJzdHIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O2tCQWlEd0JBLFU7Ozs7SUFqRGxCQyxLO0FBQ0YsbUJBQVlDLEtBQVosRUFBa0I7QUFBQTs7QUFDZCxhQUFLQSxLQUFMLEdBQWFBLEtBQWI7QUFDQSxhQUFLQyxLQUFMLEdBQWEsQ0FBYjtBQUNBLGFBQUtDLE9BQUwsR0FBZSxFQUFmO0FBQ0EsYUFBS0MsTUFBTCxHQUFjLEtBQUtILEtBQW5CO0FBQ0EsYUFBS0ksTUFBTCxHQUFjLEtBQUtELE1BQUwsQ0FBWUMsTUFBMUI7QUFDQSxhQUFLQyxHQUFMLEdBQVc7QUFDUEMsaUJBQUssQ0FERTtBQUVQQyxpQkFBSztBQUZFLFNBQVg7QUFJSDs7OztnQ0FFUUMsRyxFQUFLO0FBQ1YsaUJBQUtQLEtBQUwsSUFBY08sR0FBZDtBQUNBLGlCQUFLTixPQUFMLElBQWdCLEtBQUtDLE1BQUwsQ0FBWU0sU0FBWixDQUFzQixDQUF0QixFQUF5QkQsR0FBekIsQ0FBaEI7QUFDQSxpQkFBS0wsTUFBTCxHQUFjLEtBQUtBLE1BQUwsQ0FBWU0sU0FBWixDQUFzQkQsR0FBdEIsQ0FBZDtBQUNBLGlCQUFLSixNQUFMLEdBQWMsS0FBS0QsTUFBTCxDQUFZQyxNQUExQjs7QUFFQSxpQkFBS0MsR0FBTCxDQUFTQyxHQUFULElBQWdCRSxHQUFoQjs7QUFFQSxtQkFBTyxJQUFQO0FBQ0g7OzttQ0FFVztBQUNSLGdCQUFJRSxJQUFJLEtBQUtQLE1BQWI7QUFDQSxnQkFBSVEsSUFBSUQsRUFBRUUsS0FBRixDQUFRLE1BQVIsQ0FBUjs7QUFFQSxnQkFBSUQsQ0FBSixFQUFPO0FBQ0gscUJBQUtFLE9BQUwsQ0FBYUYsRUFBRSxDQUFGLEVBQUtQLE1BQWxCO0FBQ0EscUJBQUtDLEdBQUwsQ0FBU0MsR0FBVCxJQUFnQkssRUFBRSxDQUFGLEVBQUtQLE1BQXJCO0FBQ0g7O0FBRUQsbUJBQU8sSUFBUDtBQUNIOzs7aUNBRVM7QUFDTixtQkFBTyxVQUFVLEtBQUtDLEdBQUwsQ0FBU0MsR0FBbkIsR0FBeUIsU0FBekIsR0FBcUMsS0FBS0QsR0FBTCxDQUFTRSxHQUFyRDtBQUNIOzs7a0NBRVVPLEssRUFBT1YsTSxFQUFRO0FBQ3RCLG1CQUFPLEtBQUtELE1BQUwsQ0FBWU0sU0FBWixDQUFzQkssS0FBdEIsRUFBNkJWLE1BQTdCLENBQVA7QUFDSDs7OzJCQUVHSCxLLEVBQU87QUFDUCxtQkFBTyxLQUFLRSxNQUFMLENBQVlZLE1BQVosQ0FBbUJkLEtBQW5CLENBQVA7QUFDSDs7Ozs7O0FBR1UsU0FBU0gsVUFBVCxDQUFxQmtCLEdBQXJCLEVBQTBCO0FBQ3JDLFdBQU8sSUFBSWpCLEtBQUosQ0FBVWlCLEdBQVYsQ0FBUDtBQUNIIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IoaW5wdXQpe1xuICAgICAgICB0aGlzLmlucHV0ID0gaW5wdXQ7XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgICAgICB0aGlzLm1hdGNoZWQgPSAnJztcbiAgICAgICAgdGhpcy5yZXN0ZWQgPSB0aGlzLmlucHV0O1xuICAgICAgICB0aGlzLmxlbmd0aCA9IHRoaXMucmVzdGVkLmxlbmd0aDtcbiAgICAgICAgdGhpcy5wb3MgPSB7XG4gICAgICAgICAgICBjb2w6IDAsXG4gICAgICAgICAgICByb3c6IDBcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkdmFuY2UgKG51bSkge1xuICAgICAgICB0aGlzLmluZGV4ICs9IG51bTtcbiAgICAgICAgdGhpcy5tYXRjaGVkICs9IHRoaXMucmVzdGVkLnN1YnN0cmluZygwLCBudW0pO1xuICAgICAgICB0aGlzLnJlc3RlZCA9IHRoaXMucmVzdGVkLnN1YnN0cmluZyhudW0pO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IHRoaXMucmVzdGVkLmxlbmd0aDtcblxuICAgICAgICB0aGlzLnBvcy5jb2wgKz0gbnVtO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRyaW1MZWZ0ICgpIHtcbiAgICAgICAgbGV0IHMgPSB0aGlzLnJlc3RlZDtcbiAgICAgICAgbGV0IG0gPSBzLm1hdGNoKC9eXFxzKy8pO1xuXG4gICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgICB0aGlzLmFkdmFuY2UobVswXS5sZW5ndGgpO1xuICAgICAgICAgICAgdGhpcy5wb3MuY29sICs9IG1bMF0ubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcG9zTXNnICgpIHtcbiAgICAgICAgcmV0dXJuICdjb2w6ICcgKyB0aGlzLnBvcy5jb2wgKyAnLCByb3c6ICcgKyB0aGlzLnBvcy5yb3c7XG4gICAgfVxuXG4gICAgc3Vic3RyaW5nIChzdGFydCwgbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc3RlZC5zdWJzdHJpbmcoc3RhcnQsIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgYXQgKGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc3RlZC5jaGFyQXQoaW5kZXgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyc2VTdGF0ZSAoc3RyKSB7XG4gICAgcmV0dXJuIG5ldyBTdGF0ZShzdHIpO1xufVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3N0YXRlLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }
/******/ ]);